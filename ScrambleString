class Solution {
    int[] p = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};
    public boolean isScramble(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        if (s1.length() <= 1) return s1.equals(s2);
        if (s1.equals(s2)) return true;
        // l1 is the left of s1, l2 is left of s2, r2 is right of s2
        // We use rolling hash to make sure that we have same char set.
        int n = s2.length();
        long l1 = p[s1.charAt(0) - 'a'], l2 = p[s2.charAt(0) - 'a'], r2 = p[s2.charAt(n - 1) - 'a'];
        for(int i = 1; i < n; i++){
            if(l1 == l2 && isScramble(s1.substring(0, i), s2.substring(0, i)) && isScramble(s1.substring(i), s2.substring(i))) return true;
            if(l1 == r2 && isScramble(s1.substring(0, i), s2.substring(n - i)) && isScramble(s1.substring(i), s2.substring(0, n - i))) return true;
            l1 *= p[s1.charAt(i) - 'a'];
            l2 *= p[s2.charAt(i) - 'a'];
            r2 *= p[s2.charAt(n - i - 1) - 'a'];
        }
        return false;
    }
}
class Solution {
    public boolean isScramble(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        if (s1.equals(s2)) return true;
        int n = s1.length();
        boolean[][][] dp = new boolean[n + 1][n][n];
        char[] c1 = s1.toCharArray(), c2 = s2.toCharArray();
        // initialization for length = 1
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (c1[j] == c2[k]) {
                    dp[1][j][k] = true;
                }
            }
        }
        // checking for length start from 2 to n
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j <= n - i; j++) {
                for (int k = 0; k <= n - i; k++) {
                    //check every possible breaking point
                    for (int b = 1; b < i && !dp[i][j][k]; b++) {
                        dp[i][j][k] = (dp[b][j][k] && dp[i - b][j + b][k + b]) || (dp[b][j][k + i - b] && dp[i - b][j + b][k]);
                    }
                }
            }
        }
        return dp[n][0][0];
    }
}
